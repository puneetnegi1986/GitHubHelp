 Working with Git

 open the git bash 

 1) To configure your git use -  git config --global user.name "your name"

 2)  set your email - git config --global user.email " your email address"
 
 If you want to check your configration details than please use this command 
 
 git config --list
 
 for Help  you can use -  git help 
 
   If you want to learn more about the specific git command than type - Git help command name.   
   For example if you want to read about the commit command than type - git help commit.
   It will launch a default brower for this commit command with all details.
 
   In git bash if you want to check where is git looking right now than type - pwd  and hit enter it will show directory location
   
  For home dir type -  cd~ 
  
  For creating a git project navigate to that folder which to want to make a git project/git repository
   Type - git init 
   
   Type - git ls -la    for check the hidden file show us list of files and hidden files as well.
   
   Type clear for clearing the screen.
   
   
   Now adding a file in git project first save or create some files and folder and that
   
   type "git add ." this command will add all the files in git repo 
   
   Than type "git commit " to commit the save.
   
   If you want to write any message during commit than type 
   
   git commit -m 'message'
   
   If you want to view commit history than type
   
   git log 
   
   If you want to see history of perticuler user than type
   
   git log --author="author name"

   "git status" command use for check the status of working directory. if there is any code or file modification happen without commit 
   than it will show us details of those files.
   
   If you want to add specific file to staging area just type "git add filename" and than hit enter.
   
   Adding file to repository area just type "git commit -m message"
   
   In git every file has tree sate 
   
   working copy > staging (git add ) > repository (git commit)
   
   Viewing changes witch you have made in files -->
   
   Type "git diff" and hit enter it will show us differnce between working copy and repository file.
   Type "git diff --staged" and hit enter it will show us differnce between staging area and repository file.
   
   How to delete a file from repository.
   
   git rm "file name"
   
   How to rename a file
   
   git mv "existing File Name" "newFileName" hit enter.
   
   moving file to other folder with differant name.
   
   git mv "existing File Name" "folder path/newFileName"  hit enter
   
   How to commit directly in repository from working file.
   
   Type git commit -am and hit enter. This command applicable for only for case where u have done some modification in your file.
   
   Git Checkout command use for takes file from repository to working copy and can undo your working directory changes.
   
   type git checkout --filename 
   
   Unstaging Files (If you made wrong changes in file add it to staging area than you can remove those changes from staging area use following command)
   
   type "git reset head fileName"
    
	Getting older version of project from repository.
	 
	 git checkout commitID --fileName
	 
	 
	 
	GitHub tutorial
	
	How to push new git project in GitHub Repository
	
	1) create a new github project and uncheck the readme option
	
	2) open the git bash naviagate to that project directory, If it is not a git project then type 'git init'
            
    3) connencing the git with remote you need to type "git remote add alias Git hub project url"
	    
		Now git is connected to your github remote
		
	4) for pushing the project in github type " Git push -u githuburl/alias master"
	
	 Then git will ask you about enter your github username and password.	 
	 
	 Create the branch on your local machine and switch in this branch :

     git checkout -b [name_of_your_new_branch]
	 
	 Push the branch on github :

     $ git push origin [name_of_your_new_branch]
	 
	 You can see all branches created by using :

     $ git branch
	 
	 Push changes from your commit into your branch :

     $ git push [name_of_your_new_remote] [name_of_your_branch]
	 
	 Update your branch when the original branch from official repository has been updated :

     $ git fetch [name_of_your_remote]
	 
	 Delete a branch on your local filesystem :

	Delete a branch on your local filesystem :

	$ git branch -d [name_of_your_new_branch]
	To force the deletion of local branch on your filesystem :

	$ git branch -D [name_of_your_new_branch]
	Delete the branch on github :

	$ git push origin :[name_of_your_new_branch]	 
		
   
   
   
   
   
   
   